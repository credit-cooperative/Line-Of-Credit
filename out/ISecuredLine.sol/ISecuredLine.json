{"abi":[{"type":"function","name":"addSpigot","inputs":[{"name":"revenueContract","type":"address","internalType":"address"},{"name":"setting","type":"tuple","internalType":"struct ISpigot.Setting","components":[{"name":"ownerSplit","type":"uint8","internalType":"uint8"},{"name":"claimFunction","type":"bytes4","internalType":"bytes4"},{"name":"transferOwnerFunction","type":"bytes4","internalType":"bytes4"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimAndRepay","inputs":[{"name":"claimToken","type":"address","internalType":"address"},{"name":"zeroExTradeData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimAndTrade","inputs":[{"name":"claimToken","type":"address","internalType":"address"},{"name":"zeroExTradeData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"tokensBought","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"escrow","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEscrow"}],"stateMutability":"nonpayable"},{"type":"function","name":"liquidate","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"targetToken","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"releaseSpigot","inputs":[{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"rollover","inputs":[{"name":"newLine","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"spigot","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ISpigot"}],"stateMutability":"nonpayable"},{"type":"function","name":"sweep","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"tradeable","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"unused","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateOwnerSplit","inputs":[{"name":"revenueContract","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateWhitelist","inputs":[{"name":"func","type":"bytes4","internalType":"bytes4"},{"name":"allowed","type":"bool","internalType":"bool"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"useAndRepay","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Liquidate","inputs":[{"name":"id","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"amount","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"escrow","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ReservesChanged","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"diff","type":"int256","indexed":true,"internalType":"int256"},{"name":"tokenType","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RevenuePayment","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TradeSpigotRevenue","inputs":[{"name":"revenueToken","type":"address","indexed":true,"internalType":"address"},{"name":"revenueTokenAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"debtToken","type":"address","indexed":true,"internalType":"address"},{"name":"debtTokensBought","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"BadNewLine","inputs":[]},{"type":"error","name":"BadRollover","inputs":[]},{"type":"error","name":"DebtOwed","inputs":[]},{"type":"error","name":"ReservesOverdrawn","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"amountAvailable","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addSpigot(address,(uint8,bytes4,bytes4))":"18906bf7","claimAndRepay(address,bytes)":"1acb7525","claimAndTrade(address,bytes)":"5f618768","escrow()":"e2fdcc17","liquidate(uint256,address)":"5fae8b3d","releaseSpigot(address)":"ebb65a0f","rollover(address)":"1a5bb098","spigot()":"5e235d54","sweep(address,address,uint256)":"62c06767","tradeable(address)":"9637b5d3","unused(address)":"461035af","updateOwnerSplit(address)":"b57cb9fc","updateWhitelist(bytes4,bool)":"921c5fcb","useAndRepay(uint256)":"67828fbd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadNewLine\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadRollover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtOwed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"}],\"name\":\"ReservesOverdrawn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"diff\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"ReservesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevenuePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtTokensBought\",\"type\":\"uint256\"}],\"name\":\"TradeSpigotRevenue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"ownerSplit\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"claimFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"transferOwnerFunction\",\"type\":\"bytes4\"}],\"internalType\":\"struct ISpigot.Setting\",\"name\":\"setting\",\"type\":\"tuple\"}],\"name\":\"addSpigot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"zeroExTradeData\",\"type\":\"bytes\"}],\"name\":\"claimAndRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"zeroExTradeData\",\"type\":\"bytes\"}],\"name\":\"claimAndTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"releaseSpigot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLine\",\"type\":\"address\"}],\"name\":\"rollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spigot\",\"outputs\":[{\"internalType\":\"contract ISpigot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tradeable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"}],\"name\":\"updateOwnerSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"useAndRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TradeSpigotRevenue(address,uint256,address,uint256)\":{\"details\":\"- Can you use to figure out price of revenue tokens offchain since we only have an oracle for credit tokens- Revenue tokens may be from reserves or from Spigot revenue.\"}},\"kind\":\"dev\",\"methods\":{\"addSpigot(address,(uint8,bytes4,bytes4))\":{\"details\":\"- see Spigot.addSpigot()- callable `arbiter` ONLY\",\"returns\":{\"_0\":\"- if function call was successful\"}},\"claimAndRepay(address,bytes)\":{\"details\":\"- does not trade asset if claimToken = credit.token- callable by `arbiter`\",\"params\":{\"claimToken\":\"- The Revenue Token escrowed by Spigot to claim and use to repay debt\",\"zeroExTradeData\":\"- data generated by the 0x dex API to trade `claimToken` against their exchange contract\"},\"returns\":{\"_0\":\"newTokens       - amount of credit tokens claimed or bought during call\"}},\"claimAndTrade(address,bytes)\":{\"details\":\"- ensures first token in repayment queue is being bought- callable by `arbiter`\",\"params\":{\"claimToken\":\"- The revenue token escrowed in the Spigot to sell in trade\",\"zeroExTradeData\":\"- 0x API data to use in trade to sell `claimToken` for `credits[ids[0]]`\"},\"returns\":{\"tokensBought\":\"  - amount of credit tokens bought\"}},\"liquidate(uint256,address)\":{\"details\":\"- only callable by Arbiter- Line status MUST be LIQUIDATABLE- callable by `arbiter`\",\"params\":{\"amount\":\"- amount of `targetToken` expected to be sold off in  _liquidate\",\"targetToken\":\"- token in escrow that will be sold of to repay position\"}},\"releaseSpigot(address)\":{\"details\":\"- callable by borrower + arbiter\",\"params\":{\"to\":\"- address that caller wants to transfer Spigot ownership to\"},\"returns\":{\"_0\":\"bool       - whether or not a Spigot was released\"}},\"rollover(address)\":{\"details\":\"- transfers Spigot and Escrow ownership to newLine. Arbiter functions on this Line will no longer work\",\"params\":{\"newLine\":\"- the new, uninitialized Line deployed by borrower\"}},\"sweep(address,address,uint256)\":{\"details\":\"- callable by `borrower` or `arbiter`\",\"params\":{\"amount\":\"- amount of reserve tokens to withdraw/liquidate\",\"to\":\"- address to send swept tokens to\",\"token\":\"- revenue or credit token to sweep\"}},\"tradeable(address)\":{\"params\":{\"token\":\"- address for an ERC20 earned as revenue\"},\"returns\":{\"_0\":\"amount    - amount of unused + claimable revenue tokens available to trade for credit tokens or credit tokens availble to repay debt with\"}},\"unused(address)\":{\"params\":{\"token\":\"- address for an ERC20\"},\"returns\":{\"_0\":\"amount    - amount of revenue tokens available to trade for credit tokens or credit tokens availble to repay debt with\"}},\"updateOwnerSplit(address)\":{\"details\":\"- callable by anyone\",\"params\":{\"revenueContract\":\"- spigot to update\"},\"returns\":{\"_0\":\"didUpdate        - whether or not split was updated\"}},\"updateWhitelist(bytes4,bool)\":{\"details\":\"- see Spigot.updateWhitelistedFunction()- callable `arbiter` ONLY\",\"returns\":{\"_0\":\"- if function call was successful\"}},\"useAndRepay(uint256)\":{\"details\":\"- callable by `borrower` or first lender in repayment queue\",\"params\":{\"amount\":\"- amount of unused tokens to use to repay Lender\"},\"returns\":{\"_0\":\"- if function executed successfully\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RevenuePayment(address,uint256)\":{\"notice\":\"- Log how many revenue tokens are used to repay debt after claimAndRepay         - dont need to track value like other events because _repay already emits that         - Mainly used to log debt that is paid via Spigot directly vs other sources. Without this event it's a lot harder to parse that offchain.\"},\"TradeSpigotRevenue(address,uint256,address,uint256)\":{\"notice\":\"- Log how many revenue tokens were traded for credit tokens.         - Differs from RevenuePayment because we trade revenue at different times from repaying with revenue\"}},\"kind\":\"user\",\"methods\":{\"addSpigot(address,(uint8,bytes4,bytes4))\":{\"notice\":\"- allow Line (aka Owner on Spigot) to add new revenue streams to repay credit\"},\"claimAndRepay(address,bytes)\":{\"notice\":\"- Claims revenue tokens from the Spigot, trades them for credit tokens via a Dex aggregator (Ox protocol) and uses the bought credit tokens to repay debt.          - see SpigotedLine._claimAndTrade and SpigotedLineLib.claimAndTrade for more details on Spigot and trading logic          - see LineOfCredit._repay() for more details on repayment logic\"},\"claimAndTrade(address,bytes)\":{\"notice\":\"- allows borrower to trade revenue to credit tokens at a favorable price without repaying debt         - sends all bought tokens to `unused` to be repaid later         - see SpigotedLine._claimAndTrade and SpigotedLineLib.claimAndTrade for more details\"},\"escrow()\":{\"notice\":\"the escrow contract backing this Line\"},\"liquidate(uint256,address)\":{\"notice\":\"- Forcefully take collateral from Escrow and repay debt for lender          - current implementation just sends \\\"liquidated\\\" tokens to Arbiter to sell off how the deem fit and then manually repay with DepositAndRepay\"},\"releaseSpigot(address)\":{\"notice\":\"- Transfers ownership of the entire Spigot from its then Owner to either the Borrower (if a Line of Credit has been been fully repaid)          - or to the Arbiter (if the Line of Credit is liquidatable).\"},\"rollover(address)\":{\"notice\":\"- helper function to allow Borrower to easily transfer settings and collateral from this line to a new line         - usefull after ttl has expired and want to renew Line with minimal effort\"},\"sweep(address,address,uint256)\":{\"notice\":\"- sends unused tokens to borrower if REPAID or arbiter if LIQUIDATABLE or INSOLVENT           -  does not send tokens out if line is ACTIVE\"},\"tradeable(address)\":{\"notice\":\"- Looksup `unusedTokens` + spigot.getOwnerTokens` for how many tokens arbiter must sell in claimAndTrade/Repay\"},\"unused(address)\":{\"notice\":\"- getter for `unusedTokens` mapping which is a private var\"},\"updateOwnerSplit(address)\":{\"notice\":\"- Changes the revenue split between the Treasury and the Line (Owner) based upon the status of the Line of Credit\"},\"updateWhitelist(bytes4,bool)\":{\"notice\":\"- Sets or resets the whitelisted functions that a Borrower [Operator] is allowed to perform on the revenue generating contracts\"},\"useAndRepay(uint256)\":{\"notice\":\"- Directly repays a Lender using unused tokens already held by Line with no trading\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISecuredLine.sol\":\"ISecuredLine\"},\"evmVersion\":\"london\",\"libraries\":{\"contracts/utils/CreditLib.sol:CreditLib\":\"0x4dca189d7fb51d9cc375e4d697e5800c5d21ff87\",\"contracts/utils/CreditListLib.sol:CreditListLib\":\"0x9cbe9741b3503a790e69e1587b5d51c0056154dc\",\"contracts/utils/EscrowLib.sol:EscrowLib\":\"0x9ae9c76276e503105f20c8b452ccd0c4ee3b2df2\",\"contracts/utils/LineFactoryLib.sol:LineFactoryLib\":\"0x2b721a999b83cbcc1dbd697a27199d5b4be70102\",\"contracts/utils/LineLib.sol:LineLib\":\"0x73cb72a7efaddd99cdd2d110e2f4b8b65bf3b812\",\"contracts/utils/SpigotedLineLib.sol:SpigotedLineLib\":\"0x274946031d204567281f7616718b4abb940ef784\"},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/contracts/src/v0.8/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"contracts/interfaces/IEscrow.sol\":{\"keccak256\":\"0x9e7a6075ca4cd807aa79a7ea99db3edce491906f4ce030d3c9301d44bf0427e8\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c63714477a2cbf16bf1c6855decd4b9dfce1fdee16023b6a1cf42e40f72bb7ef\",\"dweb:/ipfs/QmNhVkdYdKY75RJUkRfKVA3mwBeQ4mu4REyggBfB6Z3MwA\"]},\"contracts/interfaces/IEscrowedLine.sol\":{\"keccak256\":\"0x18332c10988277602a59c2bade83010367bbca5c83ab3886c6fdfdb60e1594fa\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8c8a5923cb23a0a2030bd71af6ce6808aedb24627172d61715695f856399a9a3\",\"dweb:/ipfs/QmdmbdaXJe7MGGECnx2bmKizXN2quv3cMhMtAUNQFTK2LP\"]},\"contracts/interfaces/ISecuredLine.sol\":{\"keccak256\":\"0x06d9d0a6195e0342c4426eb646b17608dde83bc85d5dc27833a34eab37b95adf\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e8c5cbaa42453455aa6ee3f8d10134d7a3a7047d9aafc4aa52037a0f2caf0704\",\"dweb:/ipfs/QmYPUFadWD8tSbfDyVPtrvkTqzwLpj2769SWBe2rrbr98u\"]},\"contracts/interfaces/ISpigot.sol\":{\"keccak256\":\"0x357283b06960223a6518ccadf0e7cbdcee0783a51a9bf82efb003b628f21b366\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9d4a8f6a46431d9c81884992ed978e87b276d55bb84c233af4c288e2d76173c9\",\"dweb:/ipfs/QmW8BZqJ1qx4u6ApGcsDcPqECWRqhbvJCRenCpUXuKn1xb\"]},\"contracts/interfaces/ISpigotedLine.sol\":{\"keccak256\":\"0x0c28a5c2c96be674ebfa56f1e07fb017b64461cf10b158dbd98ecec6e604c8e6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4edf92e1d1a43e235b7f92b238774a0cd5fb33d70a46b362712684743f6d097a\",\"dweb:/ipfs/QmU8C3JZFCp7cxX8WCS8NGLrnaRZZFt2YKpcL69Z5Q58rn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BadNewLine"},{"inputs":[],"type":"error","name":"BadRollover"},{"inputs":[],"type":"error","name":"DebtOwed"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountAvailable","type":"uint256"}],"type":"error","name":"ReservesOverdrawn"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"address","name":"escrow","type":"address","indexed":false}],"type":"event","name":"Liquidate","anonymous":false},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"int256","name":"diff","type":"int256","indexed":true},{"internalType":"uint256","name":"tokenType","type":"uint256","indexed":false}],"type":"event","name":"ReservesChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":true}],"type":"event","name":"RevenuePayment","anonymous":false},{"inputs":[{"internalType":"address","name":"revenueToken","type":"address","indexed":true},{"internalType":"uint256","name":"revenueTokenAmount","type":"uint256","indexed":false},{"internalType":"address","name":"debtToken","type":"address","indexed":true},{"internalType":"uint256","name":"debtTokensBought","type":"uint256","indexed":true}],"type":"event","name":"TradeSpigotRevenue","anonymous":false},{"inputs":[{"internalType":"address","name":"revenueContract","type":"address"},{"internalType":"struct ISpigot.Setting","name":"setting","type":"tuple","components":[{"internalType":"uint8","name":"ownerSplit","type":"uint8"},{"internalType":"bytes4","name":"claimFunction","type":"bytes4"},{"internalType":"bytes4","name":"transferOwnerFunction","type":"bytes4"}]}],"stateMutability":"nonpayable","type":"function","name":"addSpigot","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"claimToken","type":"address"},{"internalType":"bytes","name":"zeroExTradeData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"claimAndRepay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"claimToken","type":"address"},{"internalType":"bytes","name":"zeroExTradeData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"claimAndTrade","outputs":[{"internalType":"uint256","name":"tokensBought","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"escrow","outputs":[{"internalType":"contract IEscrow","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"targetToken","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"liquidate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"releaseSpigot","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"newLine","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"rollover"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"spigot","outputs":[{"internalType":"contract ISpigot","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"sweep","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"tradeable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"unused","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"revenueContract","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateOwnerSplit","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes4","name":"func","type":"bytes4"},{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"updateWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"useAndRepay","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"addSpigot(address,(uint8,bytes4,bytes4))":{"details":"- see Spigot.addSpigot()- callable `arbiter` ONLY","returns":{"_0":"- if function call was successful"}},"claimAndRepay(address,bytes)":{"details":"- does not trade asset if claimToken = credit.token- callable by `arbiter`","params":{"claimToken":"- The Revenue Token escrowed by Spigot to claim and use to repay debt","zeroExTradeData":"- data generated by the 0x dex API to trade `claimToken` against their exchange contract"},"returns":{"_0":"newTokens       - amount of credit tokens claimed or bought during call"}},"claimAndTrade(address,bytes)":{"details":"- ensures first token in repayment queue is being bought- callable by `arbiter`","params":{"claimToken":"- The revenue token escrowed in the Spigot to sell in trade","zeroExTradeData":"- 0x API data to use in trade to sell `claimToken` for `credits[ids[0]]`"},"returns":{"tokensBought":"  - amount of credit tokens bought"}},"liquidate(uint256,address)":{"details":"- only callable by Arbiter- Line status MUST be LIQUIDATABLE- callable by `arbiter`","params":{"amount":"- amount of `targetToken` expected to be sold off in  _liquidate","targetToken":"- token in escrow that will be sold of to repay position"}},"releaseSpigot(address)":{"details":"- callable by borrower + arbiter","params":{"to":"- address that caller wants to transfer Spigot ownership to"},"returns":{"_0":"bool       - whether or not a Spigot was released"}},"rollover(address)":{"details":"- transfers Spigot and Escrow ownership to newLine. Arbiter functions on this Line will no longer work","params":{"newLine":"- the new, uninitialized Line deployed by borrower"}},"sweep(address,address,uint256)":{"details":"- callable by `borrower` or `arbiter`","params":{"amount":"- amount of reserve tokens to withdraw/liquidate","to":"- address to send swept tokens to","token":"- revenue or credit token to sweep"}},"tradeable(address)":{"params":{"token":"- address for an ERC20 earned as revenue"},"returns":{"_0":"amount    - amount of unused + claimable revenue tokens available to trade for credit tokens or credit tokens availble to repay debt with"}},"unused(address)":{"params":{"token":"- address for an ERC20"},"returns":{"_0":"amount    - amount of revenue tokens available to trade for credit tokens or credit tokens availble to repay debt with"}},"updateOwnerSplit(address)":{"details":"- callable by anyone","params":{"revenueContract":"- spigot to update"},"returns":{"_0":"didUpdate        - whether or not split was updated"}},"updateWhitelist(bytes4,bool)":{"details":"- see Spigot.updateWhitelistedFunction()- callable `arbiter` ONLY","returns":{"_0":"- if function call was successful"}},"useAndRepay(uint256)":{"details":"- callable by `borrower` or first lender in repayment queue","params":{"amount":"- amount of unused tokens to use to repay Lender"},"returns":{"_0":"- if function executed successfully"}}},"version":1},"userdoc":{"kind":"user","methods":{"addSpigot(address,(uint8,bytes4,bytes4))":{"notice":"- allow Line (aka Owner on Spigot) to add new revenue streams to repay credit"},"claimAndRepay(address,bytes)":{"notice":"- Claims revenue tokens from the Spigot, trades them for credit tokens via a Dex aggregator (Ox protocol) and uses the bought credit tokens to repay debt.          - see SpigotedLine._claimAndTrade and SpigotedLineLib.claimAndTrade for more details on Spigot and trading logic          - see LineOfCredit._repay() for more details on repayment logic"},"claimAndTrade(address,bytes)":{"notice":"- allows borrower to trade revenue to credit tokens at a favorable price without repaying debt         - sends all bought tokens to `unused` to be repaid later         - see SpigotedLine._claimAndTrade and SpigotedLineLib.claimAndTrade for more details"},"escrow()":{"notice":"the escrow contract backing this Line"},"liquidate(uint256,address)":{"notice":"- Forcefully take collateral from Escrow and repay debt for lender          - current implementation just sends \"liquidated\" tokens to Arbiter to sell off how the deem fit and then manually repay with DepositAndRepay"},"releaseSpigot(address)":{"notice":"- Transfers ownership of the entire Spigot from its then Owner to either the Borrower (if a Line of Credit has been been fully repaid)          - or to the Arbiter (if the Line of Credit is liquidatable)."},"rollover(address)":{"notice":"- helper function to allow Borrower to easily transfer settings and collateral from this line to a new line         - usefull after ttl has expired and want to renew Line with minimal effort"},"sweep(address,address,uint256)":{"notice":"- sends unused tokens to borrower if REPAID or arbiter if LIQUIDATABLE or INSOLVENT           -  does not send tokens out if line is ACTIVE"},"tradeable(address)":{"notice":"- Looksup `unusedTokens` + spigot.getOwnerTokens` for how many tokens arbiter must sell in claimAndTrade/Repay"},"unused(address)":{"notice":"- getter for `unusedTokens` mapping which is a private var"},"updateOwnerSplit(address)":{"notice":"- Changes the revenue split between the Treasury and the Line (Owner) based upon the status of the Line of Credit"},"updateWhitelist(bytes4,bool)":{"notice":"- Sets or resets the whitelisted functions that a Borrower [Operator] is allowed to perform on the revenue generating contracts"},"useAndRepay(uint256)":{"notice":"- Directly repays a Lender using unused tokens already held by Line with no trading"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink/=lib/chainlink/contracts/src/v0.8/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/ISecuredLine.sol":"ISecuredLine"},"evmVersion":"london","libraries":{"contracts/utils/CreditLib.sol:CreditLib":"0x4dca189d7fb51d9cc375e4d697e5800c5d21ff87","contracts/utils/CreditListLib.sol:CreditListLib":"0x9cbe9741b3503a790e69e1587b5d51c0056154dc","contracts/utils/EscrowLib.sol:EscrowLib":"0x9ae9c76276e503105f20c8b452ccd0c4ee3b2df2","contracts/utils/LineFactoryLib.sol:LineFactoryLib":"0x2b721a999b83cbcc1dbd697a27199d5b4be70102","contracts/utils/LineLib.sol:LineLib":"0x73cb72a7efaddd99cdd2d110e2f4b8b65bf3b812","contracts/utils/SpigotedLineLib.sol:SpigotedLineLib":"0x274946031d204567281f7616718b4abb940ef784"}},"sources":{"contracts/interfaces/IEscrow.sol":{"keccak256":"0x9e7a6075ca4cd807aa79a7ea99db3edce491906f4ce030d3c9301d44bf0427e8","urls":["bzz-raw://c63714477a2cbf16bf1c6855decd4b9dfce1fdee16023b6a1cf42e40f72bb7ef","dweb:/ipfs/QmNhVkdYdKY75RJUkRfKVA3mwBeQ4mu4REyggBfB6Z3MwA"],"license":"GPL-3.0"},"contracts/interfaces/IEscrowedLine.sol":{"keccak256":"0x18332c10988277602a59c2bade83010367bbca5c83ab3886c6fdfdb60e1594fa","urls":["bzz-raw://8c8a5923cb23a0a2030bd71af6ce6808aedb24627172d61715695f856399a9a3","dweb:/ipfs/QmdmbdaXJe7MGGECnx2bmKizXN2quv3cMhMtAUNQFTK2LP"],"license":"GPL-3.0"},"contracts/interfaces/ISecuredLine.sol":{"keccak256":"0x06d9d0a6195e0342c4426eb646b17608dde83bc85d5dc27833a34eab37b95adf","urls":["bzz-raw://e8c5cbaa42453455aa6ee3f8d10134d7a3a7047d9aafc4aa52037a0f2caf0704","dweb:/ipfs/QmYPUFadWD8tSbfDyVPtrvkTqzwLpj2769SWBe2rrbr98u"],"license":"GPL-3.0"},"contracts/interfaces/ISpigot.sol":{"keccak256":"0x357283b06960223a6518ccadf0e7cbdcee0783a51a9bf82efb003b628f21b366","urls":["bzz-raw://9d4a8f6a46431d9c81884992ed978e87b276d55bb84c233af4c288e2d76173c9","dweb:/ipfs/QmW8BZqJ1qx4u6ApGcsDcPqECWRqhbvJCRenCpUXuKn1xb"],"license":"GPL-3.0"},"contracts/interfaces/ISpigotedLine.sol":{"keccak256":"0x0c28a5c2c96be674ebfa56f1e07fb017b64461cf10b158dbd98ecec6e604c8e6","urls":["bzz-raw://4edf92e1d1a43e235b7f92b238774a0cd5fb33d70a46b362712684743f6d097a","dweb:/ipfs/QmU8C3JZFCp7cxX8WCS8NGLrnaRZZFt2YKpcL69Z5Q58rn"],"license":"GPL-3.0"}},"version":1},"ast":{"absolutePath":"contracts/interfaces/ISecuredLine.sol","id":781,"exportedSymbols":{"IEscrowedLine":[147],"ISecuredLine":[780],"ISpigotedLine":[1133]},"nodeType":"SourceUnit","src":"130:772:7","nodes":[{"id":759,"nodeType":"PragmaDirective","src":"130:24:7","nodes":[],"literals":["solidity","^","0.8",".16"]},{"id":761,"nodeType":"ImportDirective","src":"156:50:7","nodes":[],"absolutePath":"contracts/interfaces/IEscrowedLine.sol","file":"./IEscrowedLine.sol","nameLocation":"-1:-1:-1","scope":781,"sourceUnit":148,"symbolAliases":[{"foreign":{"id":760,"name":"IEscrowedLine","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"164:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":763,"nodeType":"ImportDirective","src":"207:50:7","nodes":[],"absolutePath":"contracts/interfaces/ISpigotedLine.sol","file":"./ISpigotedLine.sol","nameLocation":"-1:-1:-1","scope":781,"sourceUnit":1134,"symbolAliases":[{"foreign":{"id":762,"name":"ISpigotedLine","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"215:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":780,"nodeType":"ContractDefinition","src":"259:642:7","nodes":[{"id":769,"nodeType":"ErrorDefinition","src":"336:17:7","nodes":[],"errorSelector":"9b455030","name":"DebtOwed","nameLocation":"342:8:7","parameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"350:2:7"}},{"id":771,"nodeType":"ErrorDefinition","src":"358:19:7","nodes":[],"errorSelector":"3cd70f8d","name":"BadNewLine","nameLocation":"364:10:7","parameters":{"id":770,"nodeType":"ParameterList","parameters":[],"src":"374:2:7"}},{"id":773,"nodeType":"ErrorDefinition","src":"382:20:7","nodes":[],"errorSelector":"b75799e9","name":"BadRollover","nameLocation":"388:11:7","parameters":{"id":772,"nodeType":"ParameterList","parameters":[],"src":"399:2:7"}},{"id":779,"nodeType":"FunctionDefinition","src":"855:44:7","nodes":[],"documentation":{"id":774,"nodeType":"StructuredDocumentation","src":"435:415:7","text":" @notice - helper function to allow Borrower to easily transfer settings and collateral from this line to a new line\n         - usefull after ttl has expired and want to renew Line with minimal effort\n @dev    - transfers Spigot and Escrow ownership to newLine. Arbiter functions on this Line will no longer work\n @param newLine - the new, uninitialized Line deployed by borrower"},"functionSelector":"1a5bb098","implemented":false,"kind":"function","modifiers":[],"name":"rollover","nameLocation":"864:8:7","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"mutability":"mutable","name":"newLine","nameLocation":"881:7:7","nodeType":"VariableDeclaration","scope":779,"src":"873:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"872:17:7"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[],"src":"898:0:7"},"scope":780,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":764,"name":"IEscrowedLine","nameLocations":["285:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"285:13:7"},"id":765,"nodeType":"InheritanceSpecifier","src":"285:13:7"},{"baseName":{"id":766,"name":"ISpigotedLine","nameLocations":["300:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":1133,"src":"300:13:7"},"id":767,"nodeType":"InheritanceSpecifier","src":"300:13:7"}],"canonicalName":"ISecuredLine","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[780,1133,147],"name":"ISecuredLine","nameLocation":"269:12:7","scope":781,"usedErrors":[769,771,773,1014],"usedEvents":[129,1008,1025,1033]}],"license":"GPL-3.0"},"id":7}